name: Release Pipeline

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Validate Release
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -e .
    
    - name: Run full test suite
      run: |
        pytest tests/ -v --cov=src/rcsim --cov-report=xml \
               --cov-fail-under=80 \
               -m "not slow"
    
    - name: Validate version consistency
      run: |
        # Extract version from tag
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        
        # Extract version from pyproject.toml
        PYPROJECT_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        
        # Extract version from package
        PACKAGE_VERSION=$(python -c "import rcsim; print(rcsim.__version__)")
        
        echo "Tag version: $TAG_VERSION"
        echo "pyproject.toml version: $PYPROJECT_VERSION"
        echo "Package version: $PACKAGE_VERSION"
        
        if [ "$TAG_VERSION" != "$PYPROJECT_VERSION" ]; then
          echo "Version mismatch between tag and pyproject.toml"
          exit 1
        fi
        
        if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
          echo "Version mismatch between tag and package"
          exit 1
        fi

  # Build Release Assets
  build-release:
    name: Build Release Assets
    runs-on: ${{ matrix.os }}
    needs: validate-release
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            asset_name: rcsim-linux
          - os: windows-latest
            asset_name: rcsim-windows
          - os: macos-latest
            asset_name: rcsim-macos
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libegl1-mesa-dev \
          libgles2-mesa-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        pip install -e .
    
    - name: Build executable with PyInstaller
      run: |
        pyinstaller --onefile \
                   --name ${{ matrix.asset_name }} \
                   --add-data "src/rcsim/assets:assets" \
                   --add-data "src/rcsim/shaders:shaders" \
                   --hidden-import pygame \
                   --hidden-import moderngl \
                   --hidden-import numpy \
                   src/rcsim/main.py
    
    - name: Create archive (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        cd dist/
        tar -czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.asset_name }}
    
    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd dist/
        7z a ${{ matrix.asset_name }}.zip ${{ matrix.asset_name }}.exe
    
    - name: Upload release assets
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: |
          dist/${{ matrix.asset_name }}.tar.gz
          dist/${{ matrix.asset_name }}.zip

  # Build Python Package
  build-package:
    name: Build Python Package
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build source distribution
      run: python -m build --sdist
    
    - name: Build wheel distribution
      run: python -m build --wheel
    
    - name: Check distributions
      run: twine check dist/*
    
    - name: Upload Python package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/

  # Generate Release Notes
  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate changelog
      uses: orhun/git-cliff-action@v3
      id: git-cliff
      with:
        config: cliff.toml
        args: --verbose --latest --strip header
      env:
        OUTPUT: CHANGES.md
    
    - name: Upload changelog
      uses: actions/upload-artifact@v4
      with:
        name: changelog
        path: CHANGES.md

  # Create GitHub Release
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-release, build-package, generate-changelog]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          rcsim-linux/*.tar.gz
          rcsim-windows/*.zip
          rcsim-macos/*.tar.gz
          python-package/*.whl
          python-package/*.tar.gz
        body_path: changelog/CHANGES.md
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish to PyPI
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build-package, validate-release]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: pypi
    
    steps:
    - name: Download package artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip_existing: true

  # Publish to Test PyPI (for testing)
  publish-test-pypi:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: [build-package, validate-release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && contains(github.ref, 'rc')
    
    steps:
    - name: Download package artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package
        path: dist/
    
    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/
        skip_existing: true

  # Update Documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: github-release
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -e .
    
    - name: Build documentation
      run: |
        cd docs/
        make html
    
    - name: Deploy documentation
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: docs/_build/html
        destination_dir: ${{ github.ref_name }}

  # Docker Build and Push
  docker-release:
    name: Docker Release
    runs-on: ubuntu-latest
    needs: validate-release
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: rcsim/advanced-rubiks-cube-simulator
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64

  # Post-release Actions
  post-release:
    name: Post-release Actions
    runs-on: ubuntu-latest
    needs: [github-release, publish-pypi]
    if: always() && (needs.github-release.result == 'success' || needs.publish-pypi.result == 'success')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Create issue for next release
      uses: actions/github-script@v7
      with:
        script: |
          const version = context.ref.replace('refs/tags/v', '');
          const nextVersion = version.split('.').map((v, i) => i === 2 ? parseInt(v) + 1 : v).join('.');
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Prepare for next release v${nextVersion}`,
            body: `
            Release v${version} has been published successfully! 🎉
            
            ## Next Steps for v${nextVersion}:
            - [ ] Update version in pyproject.toml
            - [ ] Update CHANGELOG.md
            - [ ] Review and update documentation
            - [ ] Plan new features and improvements
            - [ ] Update dependencies if needed
            
            ## Release v${version} Summary:
            - Published to PyPI: ${needs['publish-pypi'].result === 'success' ? '✅' : '❌'}
            - GitHub Release: ${needs['github-release'].result === 'success' ? '✅' : '❌'}
            - Documentation Updated: ✅
            `,
            labels: ['release', 'planning']
          });
    
    - name: Notify team (optional)
      if: env.SLACK_WEBHOOK_URL != ''
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "🎉 Advanced Rubik's Cube Simulator ${{ github.ref_name }} has been released!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}